05/01/2024 - SEXTA FEIRA

import javax.swing.JOptionPane;
/* USO DO JOPtionPane */
/* OPÇÕES DO JOPtionPane 
	- showConfimDialog - apresenta uma pergunta de confirmação com sim/não/cancelar
	- showInputDialog - agaurda uma entrada de dados do usuário (input)
	- showMessageDialog - janela com mensagem para o usuário 
	- showOptionDialog - janela customizável utilizando os recursos do java 
*/

JOptionPane.showConfirmDialog(parentComponent: null, message: "Mensagem de confirmação"); 
JOptionPane.showConfirmDialog(parentComponent: null, message: "Mensagem de confirmação", title: "Tela de confirmação", optionType: 0, messageType: 0); 
//optionType - 0 = ERRO - 1 = Informação - 2 = Warning
//mesageType - 0 = YES/NO - 1 = YES/NO/CANCEL - 2 OK/CANCEL
JOptionPane.showInputDialog(message: "Insira algo no campo abaixo!"); 
JOptionPane.showMessageDialog(parentComponet: null, message: "Esta é a uma mensagem do sistema", title: "Mensagem", messageType: 2);
String [] options = {"AAA", "BBB", "CCC", "DDD"}
JOptionPane.showOptionDialog(parentComponet: null, message: "Opções", title: "Menu de Opções", optionType: 0, messageType: 0, icon: null, options, options[0]);

int resposta = 0;
//RESPOSTA 0 = SIM // RESPOSTA 1 = NÃO
do {
	String nome = JOptionPane.showInputDialog("Digite seu nome: ");
	if (nome.equalsIgnoreCase("Pedro")) {
		JOptionPane.showMessageDialog(null, "Olá tutor" + nome + ".", "Boa-vindas!", 1); 
	} else if (nome.isBlank()) {
		JOptionPane.showMessageDialog(null, "Nome invalido!", "Erro!", o); 
 	} else {
		JOptionPane.showMessageDialog(null, "Olá, aluno ", + nome + ".", "Boas-Vindas!", 1);
	}
	resposta = JOptionPane.showConfirmDialog(null, "Deseja continuar?");
}while(resposta == 0);


isBlank - se está vazio ou com um monte de espaços em branco ele considera que o campo está sem nada

isEmpty - Considera que o tamanho do texto do campo é ZERO.


06/01/2024 - SÁBADO 


package quiexemplo2;
public class GUIExemplo2 {
	public static void main (Strinf[] args) {
		Tela1 tela = new Tela1();
		tela.setVisible(true);
		tela.setVisible(false);

		JFrame telaPrincipal = new JFrame();

		JPanel painel = new JPanel();
		JLabel texto = new JLabel("Digite o seu nome: ");

		JTextField input = new JTextField(10);
		JButton botao = new JButton("Entrar");

		//Adicionar um ouvinte de ação ao botão
		botao.addActionListener(
			new ActionListener() {
				@Override
				plubic void actionPerformed(ActionEvent e) {
					String nome = input.getText();
					if (nome.equalsIgnoreCase("Junior")) {
						JOptionPane.showMessageDialog(null, "Olá tutor " + nome + ".", " Boas-vindas!", 1);
					} else if (nome.isBlank()){
						JOptionPane.showMessageDialog(null, "Nome inválido!", "Erro!", 0);
					} else {
						JOptionPane.showConfirmDialog(null, "Olá, aluno " + nome + ".", "Boas-vindas!", 1);
					}
				}
			});
			
			painel.add(texto);
			painel.add(input);
			painel.add(botao);
			telaPrincipal.add(painel);	

			telaPrincipal.setVisible(true);
			telaPrincipal.setSize(800,600);
			telaPrincipal.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			telaPrincipal.pack();
	}
}


08/01/2024 - SEGUNDA 

Criação do main GUIBuilder 
Criação JFrame 
Crianção de dois labels 
Crianção de dois botões 
Nomear botões e labels
alteração da fonte 

txtBemVindos 
txtSelecionar
bntCadastrarPedidos
bntListarPedidos

09/01/2024 - TERÇA

package guibuilder;
public class GUIBuilder {
	puclic static void main (String [] args) {
		menuPrincipal mp = new MenuPrincipal ();
		mp.setVisible(true);

	}
}

borda bevel 

novo JFrame 
CadastroPedido 

label- Cadastre o Pedido
label- Preencha todos os campos abaixo:

novo JFrame 
ListarPedido

label- listagem de Peidos 
label- todos os pedidos do dia 

10/01/2024 - QUARTA 

cadastrar cadastro 
criar o botão de sair 
btnSair
dispose();

label
nome do cliente 
preço R$
quantidade
acompanhamento 
adicional 

txtNomeCliente
txtPreco
txtQuantidade
txtAcompanhamento 
txtAdiconal 

textField
fieldNomeCliente 
textField
fieldPreco
textField
fieldQuantidade

Radio Button
Sim
rbnSim 
Radio Button 
Não 
rbnNao 
incluir botões no grupo acompanhamento 

criar um button group 
acompanhamento 

criar novo botão 
cadastrar
btnCadastrar

listar pedido 
criar o botão de sair 
btnSair
dispose();

11/01/2024 - QUINTA 

criando combo box 
selecione uma opção:
não
bancon
cebola 
calarasa 
bife exta
batata frita 
catupiry
4 queijos 
comboAdicional 

criar uma classe pedido

packege guibuilder;
public class Pedido {

	private int id;
	private String nomeCliente;
	private double preco;
	private int quantidade;
	private String acompanhamento;
	private String adicional;
	
	public Pedido() {
	
	}
	
	public Pedido (int id, String nomeCliente, double preco, int quantidade, String acompanhamento, String adicional);
		this.id = id;
		this.nomeCliente = nomeCliente;
		this.preco = preco;
		this.quantidade = quantidade;
		this.acompanhamento = acompanhamento;
		this.adicional = adicional;
		
	}
	
	Get e Set
}

dia 15/01/2024

fazer o botão cadastrar funcionar 

private void btnCadastrarPedidoActionPerformed(java.awt.event.ActionEvent evt) {
	Pedido p = new Pedido ();
	p.setNomeCliente(fieldNomeCliente.getText());

	//Convertendo a String do Textfield para um double
	p.setPreco(Double.parseDouble(fieldPreco.getText());//parse

	//Convertendo a String do Textfield para um int
	p.setQuantidade(Integer.parseInt(fieldQuantidade.getTxt());//parse

	//Manuseando a informação dos RadioButton
	if (rdnSim.isSelected()){
		p.setAcompanhamento("Sim");
	}else if(rdnNao.isSelected()) {
		p.setAcompanhamento("Não");
	}else { 
		p.setAcompnhamento("");
	}

	//Manusear a informação do comboBox
	p.setAdicional(comboAdicional.getSelectItem().toString());
	
	JOptionPane.showMessageDialog(null, "Pedido cadastrado com Sucesso!");

	feedBackNome.setText("Nome do cliente: " + p.getNomeCliente());
	feedBackPreco.setText("Preço: " + p.getPreco());
	feedBackQuantidade.setText("Quantidade: " + p.getQuantidade());
	feedBackAcompanhamento.setText("Acompanhamento? " + p.getAcompanhament());
	feedBackAdicional.setText("Adicional? " + p.adicional());
}


criar um novo painel 
criar um label 
Informações do pedido:
label 
Nome Cliente:
Preço:
Quantidade:
Acompanhamento:
Adicional: 

feedBackNome
feedBackPreco
feedBackQuantidade
feedBackAdicional
feedBackAcompanhamento

24/01/2024 -Quarta

ArrayList<Pedido> lista = ListaDePedido.listar();

//For para montar a linha na tabela
for (int i =0; i <lista.size(); i++) {
	Pedido p = lista.get(i);
	String [] linha = {
	Integer.ToString(p.getId()),
	p.getNomeCliente(),
	Double.toString(p.getPreco()),
	Integer.toString(p.getQuantidade()),
	p.getAcompanhamento(),
	p.getAdicional());;
	tabela.addRow(linha); //Não esquecer de adicionar a linha na tabela!
}

 return tabela;
 
}


Na classe ListaDePedidos

else {
	p.setId(lista.size() + 1;

public static boolean excluir(int id){
	try {
	if(id <=0 ){
		JOptionPane.showMessageDialog(null,"Selecione um item para excluir:");
	} else {
	lista.remove(id);
	retunr true;
} 
} catch (Exception e) {
	System.out.println("Ocorreu um erro ao excluir da lsita");
}

return false;

}
}

JFrame lista de pedidos

criar 

private int getPosicao(){
	int posicao = tabelaPedido.getSelectedRow();
	
	if(posicao <=0) {
	JOpitonPane.showMessageDialog(null,"Selecione um item para excluir");
}
	return posicao;
}

ir para o botão excluir 

 ListaPedido.excluir(getPosicao());


Atividade II

Criar um menu principal 
com três botões 
IMC
Gasto Calorico
Recomendações 
alterar o nome para 
btnIMC
btnGastoCalorico
btnRecomendações

criar 
JFrame
IMC
GastoCalorico
Recomendações 

JFrame IMC

alterar font dos label 

criar um label
Cálculo de IMC

criar dois panel 

com dois label
altura (m):
peso (kg):

alterar o nome
lbnAltura
lbnPeso

dois textField
altura
peso

alterar nome para 
txtAltura
txtPeso

criar um botão 
calcular 

alterar o botão 
colocar bodar 
font arial black 14

criar um outro panel

criar dois label 
resultado:
interpretação:

alterar 
lbnResultadado 
lbnInterpretação

criar um botão de sair para voltar no menu principal 

JFrame GastoCalorico

criar label 
Cálculo de Gasto Calórico
altarar 
txtCalculoGastoCalorico

criar panel 
criar dois botões 
radio button
mulher
homem 
alterar 
radioButtonMulher
radioButtonHomem
criar button Group
adicionar 
radio button mulher
radio button homem

criar três labels

peso (kg):
altura (cm):
idade:

alterar para 
txtpeso
txtaltura
txtidade

criar uma list
nível de atividade

criar três textField
peso
altura
idade

alterar para 
textFieldpeso
textFieldAltura
textFieldIdade

criar um botão 
calcular 

alterar o botão 
btnCalcular
colocar bodar 
font arial black 14

criar um outro panel

criar dois label 
Gasto Basal:
Gasto Total:

alterar 
txtGastoBasal
txtGastoTotal

criar um botão de sair para voltar no menu principal 

sedentário
leve (exercício leve 1 a 3 dias/semana)
morado (exercício moderado 3 a 5 dias/semana)
ativo (exercício pesado 5 a 6 dias/semana)
extremamente ativo (exercício pesado diário)


JFrame Recomendações

Criar panel 

Alterar
paniel1

Criar label 
Recomendações 

Alterar
txtRecomendacoes

Criar botão
Sair

Alterar
btnSair

Criar panel
alterar
paniel2

Criar label
calorias diarias (kcal):

Alterar
txtCaloriasDiarias

Criar textField

Alterar
textFieldColoriasDiarias

Criar botão
Calcular

Alterar
btnCalcular

criar panel
criar label
carboidratos (50%):
Proteina (25%):
Gordura (25%):

Parte desing OK 

Parte código 

criar uma nova classe chamada cliente 

double altura
double peso
int idade
boolean sexo

Cliente c = new Cliente();

        try {
            c.setAltura(Double.parseDouble(textfieldAltura.getText());

            c.setPeso(Double.parseDouble(textfieldPeso.getText()));

	    imc = peso/altura;

            if (imc < = 18.5) {
feedbackResultado.setText("Resultado: " + imc;



(rdnMulher.isSelected()) {
                p.setMulher("Mulher");
            } else if (rdnHomem.isSelected()) {
                p.setHomem("Homem");
            } else {
                p.setAcompanhamento("");
            }
            if (comboAdicional.getSelectedItem().toString().equalsIgnoreCase("Selecione uma opção:")) {
                p.setAdicional("");
            } else {
                p.setAdicional(comboAdicional.getSelectedItem().toString());
            }

            if (ListasDePedidos.adicionar(p)) {
                
                feedBackNome.setText("Nome do Cliente: " + p.getNomeCliente());
                feedBackPreco.setText("Preço: " + p.getPreco());
                feedBackQuantidade.setText("Quantidade: " + p.getQuantidade());
                feedBackAcompanhamento.setText("Acompanhamento? " + p.getAcompanhamento());
                feedBackAdicional.setText("Adicional? " + p.getAdicional());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Pedido não pode ser cadastrado");
            System.out.println(e);
        }
    }     
                           
25/01/2024 - quinta

try {
        // Verifica se os campos estão preenchidos
        if (textFieldAltura.getText().isEmpty() || textFieldPeso.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, preencha todos os campos.", "Erro", JOptionPane.ERROR_MESSAGE);
            return; // Encerra a execução se algum campo estiver vazio
        }

        // Preenche os atributos do cliente
        c.setAltura(Double.parseDouble(textFieldAltura.getText()));
        c.setPeso(Double.parseDouble(textFieldPeso.getText()));

        // Calcula o IMC
        double imc = c.getPeso() / Math.pow(c.getAltura(), 2);

        // Exibe o resultado do IMC
        JOptionPane.showMessageDialog(this, "Seu IMC é: " + String.format("%.2f", imc), "Resultado", JOptionPane.INFORMATION_MESSAGE);

        // Determina a interpretação do IMC
        String interpretacao = determinarInterpretacao(imc);

        // Exibe a interpretação
        labelResultado.setText("Resultado: " + interpretacao);

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Por favor, insira valores numéricos válidos.", "Erro", JOptionPane.ERROR_MESSAGE);
    }
}

private String determinarInterpretacao(double imc) {
    if (imc < 18.5) {
        return "Magreza";
    } else if (imc >= 18.5 && imc <= 24.9) {
        return "Normal";
    } else if (imc >= 25 && imc <= 29.9) {
        return "Sobrepeso";
    } else if (imc >= 30 && imc <= 39.9) {
        return "Obesidade";
    } else {
        return "Obesidade grave";
    }
}

Leve ( exercício leve 1 a 3 dias/semana)
Moderado (exercício moderado 3 a 5 dias/semana)
Ativo (exercício pesado 5 a 6 dias/semana)
Extremamente Ativo ( exercício pesado diário)